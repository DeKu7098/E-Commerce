{"version":3,"sources":["component/products/pages/AuthForm.module.css","component/products/pages/Authform.js","component/products/pages/Authpage.js"],"names":["module","exports","AuthForm","emailInputRef","useRef","passwordInputRef","authCtx","useContext","AuthContext","history","useHistory","useState","isLogin","setIsLogin","isLoading","setIsLoading","Fragment","className","to","classes","auth","onSubmit","event","preventDefault","Url","enteredEmail","current","value","enteredPassword","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","Error","login","idToken","console","log","replace","isLoggedIn","catch","err","alert","errorMessage","control","htmlFor","type","id","required","ref","actions","toggle","onClick","prevState","AuthPage"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,yB,iHCqIhHC,EA/HA,WACb,IAAMC,EAAgBC,mBAChBC,EAAmBD,mBACnBE,EAAUC,qBAAWC,KACrBC,EAAQC,cAEd,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KA0DA,OAEF,eAAC,IAAMC,SAAP,WACI,iCACA,qBAAIC,UAAU,SAAd,UAEJ,cAAC,IAAD,CAASA,UAAU,IAAIC,GAAG,QAA1B,SACC,+CAIO,6BACE,cAAC,IAAD,CAASA,GAAG,QAAZ,oBAIF,6BACE,cAAC,IAAD,CAASA,GAAG,SAAZ,qBAGF,6BACE,cAAC,IAAD,CAASA,GAAG,aAAZ,+BAON,0BAASD,UAAWE,IAAQC,KAA5B,UACE,6BAAKR,EAAU,QAAU,YACzB,uBAAMS,SAlFY,SAACC,GACrBA,EAAMC,iBAEN,IAKIC,EALEC,EAAetB,EAAcuB,QAAQC,MACrCC,EAAkBvB,EAAiBqB,QAAQC,MAGjDZ,GAAa,GAGTS,EADAZ,EACI,oHAEA,wGAGViB,MACEL,EACA,CACEM,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOT,EACPU,SAAUP,EACVQ,mBAAmB,IAErBC,QAAS,CACP,eAAgB,sBAGpBC,MAAK,SAACC,GAEN,OADAxB,GAAa,GACTwB,EAAIC,GACCD,EAAIE,OAEJF,EAAIE,OAAOH,MAAK,SAACI,GAGtB,MAAM,IAAIC,MAFS,4BAGpB,GAEJ,IAAEL,MAAK,SAAAI,GACNpC,EAAQsC,MAAMF,EAAKG,QAAQH,EAAKR,OAChCY,QAAQC,IAAIL,EAAKG,QAAQH,EAAKR,OAC9BzB,EAAQuC,QAAQ,UAChBF,QAAQC,IAAIzC,EAAQ2C,WAGrB,IAAEC,OAAM,SAAAC,GACPC,MAAMD,EAAIE,aAEX,GACF,EAgCK,UACE,sBAAKpC,UAAWE,IAAQmC,QAAxB,UACE,uBAAOC,QAAQ,QAAf,wBACA,uBAAOC,KAAK,QAAQC,GAAG,QAAQC,UAAQ,EAACC,IAAKxD,OAE/C,sBAAKc,UAAWE,IAAQmC,QAAxB,UACE,uBAAOC,QAAQ,WAAf,2BACA,uBACEC,KAAK,WACLC,GAAG,WACHC,UAAQ,EACRC,IAAKtD,OAGT,sBAAKY,UAAWE,IAAQyC,QAAxB,WACI9C,GAAa,iCAASF,EAAU,QAAU,mBAC3CE,GAAa,mDACd,wBACE0C,KAAK,SACLvC,UAAWE,IAAQ0C,OACnBC,QA1GU,WAClBjD,GAAW,SAACkD,GAAD,OAAgBA,CAAhB,GACZ,EAqGO,SAKGnD,EAAU,qBAAuB,2CAQ7C,EC7HYoD,UAJE,WACb,OAAO,cAAC,EAAD,GACV,C","file":"static/js/5.763c1355.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__3NmlO\",\"control\":\"AuthForm_control__EwTT4\",\"actions\":\"AuthForm_actions__3Yw66\",\"toggle\":\"AuthForm_toggle__3g7Cb\"};","import React, { useState, useRef,useContext} from 'react';\r\nimport classes from './AuthForm.module.css';\r\nimport { useHistory}  from 'react-router-dom';\r\nimport { NavLink } from 'react-router-dom';\r\nimport AuthContext from '../store/Auth-Context';\r\n\r\n\r\nconst AuthForm = () => {\r\n    const emailInputRef = useRef();\r\n    const passwordInputRef = useRef();\r\n    const authCtx = useContext(AuthContext);\r\n    const history=useHistory();\r\n  \r\n    const [isLogin, setIsLogin] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n  \r\n    const modeHandler = () => {\r\n      setIsLogin((prevState) => !prevState);\r\n    };\r\n  \r\n    const submitHandler = (event) => {\r\n      event.preventDefault();\r\n  \r\n      const enteredEmail = emailInputRef.current.value;\r\n      const enteredPassword = passwordInputRef.current.value;\r\n  \r\n  \r\n      setIsLoading(true); \r\n      let Url;\r\n      if (isLogin) {\r\n          Url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAeu0fr6VeKS0nbxCqGxxis7mzJiLNuWGg'\r\n      } else {\r\n          Url='https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAeu0fr6VeKS0nbxCqGxxis7mzJiLNuWGg'\r\n        \r\n    }\r\n    fetch(\r\n      Url,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email: enteredEmail,\r\n          password: enteredPassword,\r\n          returnSecureToken: true,\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    ).then((res) => {\r\n      setIsLoading(false);\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return res.json().then((data) => {\r\n          let errorMessage = 'Authentication failed!!!!';\r\n          \r\n          throw new Error(errorMessage);\r\n        });\r\n      }\r\n    }).then(data=>{\r\n      authCtx.login(data.idToken,data.email);\r\n      console.log(data.idToken,data.email);\r\n      history.replace('/store');\r\n      console.log(authCtx.isLoggedIn);\r\n  \r\n\r\n    }).catch(err=>{\r\n      alert(err.errorMessage);\r\n\r\n    });\r\n  }\r\n  \r\n    return (\r\n  \r\n  <React.Fragment>\r\n      <header>\r\n      <ul className=\"header\">\r\n     \r\n  <NavLink className=\"a\" to=\"/auth\">\r\n   <button> Login </button>\r\n  </NavLink>\r\n  \r\n        \r\n          <li>\r\n            <NavLink to=\"/home\">Home</NavLink>\r\n          </li>\r\n         \r\n  \r\n          <li>\r\n            <NavLink to=\"/about\">About</NavLink>\r\n          </li>\r\n  \r\n          <li>\r\n            <NavLink to=\"/Contactus\">Contact us</NavLink>\r\n          </li>\r\n         \r\n          </ul>\r\n  \r\n          </header>\r\n      \r\n      <section className={classes.auth}>\r\n        <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\r\n        <form onSubmit={submitHandler}>\r\n          <div className={classes.control}>\r\n            <label htmlFor='email'>Your Email</label>\r\n            <input type='email' id='email' required ref={emailInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor='password'>Your Password</label>\r\n            <input\r\n              type='password'\r\n              id='password'\r\n              required\r\n              ref={passwordInputRef}\r\n            />\r\n          </div>\r\n          <div className={classes.actions}>\r\n            {!isLoading && <button>{isLogin ? 'Login' : 'Create Account'}</button>}\r\n            {isLoading && <p>Sending request...</p>}\r\n            <button\r\n              type='button'\r\n              className={classes.toggle}\r\n              onClick={modeHandler}\r\n            >\r\n              {isLogin ? 'Create new account' : 'Login with existing account'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </section>\r\n      </React.Fragment>\r\n      \r\n    );\r\n  };\r\n  \r\n  export default AuthForm;","import AuthForm from \"./Authform\";\r\n\r\n\r\nconst AuthPage = () => {\r\n    return <AuthForm />\r\n};\r\n\r\nexport default AuthPage;"],"sourceRoot":""}